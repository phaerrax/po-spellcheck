#!/usr/bin/env python

from argparse import ArgumentParser
from pathlib import Path
from shutil import copy2
from subprocess import call
from babel.messages.catalog import Catalog
from babel.messages.pofile import read_po, write_po
from tempfile import NamedTemporaryFile


def spellcheck_po(po_file_name, args):
    po_path = Path(po_file_name)
    with open(path, "r+b") as f:
        # The `+` is to check that the file is writable.
        po = read_po(f)

    backup_path = po_path.with_suffix(po_path.suffix + ".bak")
    if args.backup:
        # `copy2` copies attempting to preserve file metadata.
        copy2(path, backup_path)

    # We will extract from the original PO file all translated strings, and create a new
    # PO from them without the English one, so that we can run a spell checker on it.
    # In the end, we will put them back together.

    msgs_by_tmp_id = {}
    # This will hold the original strings, indexed by an integer which represents their
    # order of appearance in the original PO file.
    po_with_tmp_id = Catalog()
    # This Catalog will hold the translated strings, without the original ones.
    for i, m in enumerate(po):
        if not m.id:
            continue
        tmp_id = str(i)
        msgs_by_tmp_id[tmp_id] = (m.id, m.context)
        # We need to save the context, too: if the Message has a context, then it is
        # necessary to specify it when retrieving it from the Catalog with the `get`
        # method, otherwise it returns None.
        if isinstance(m.string, tuple):
            tmp_id = (tmp_id, tmp_id)
        po_with_tmp_id.add(tmp_id, m.string, lineno=m.lineno)
        # In this new Catalog, the original string is replaced by the integer to which it
        # is associated.

    # Write the PO with the translated strings to a temporary file; we will call `aspell`
    # on it later.
    tmp_path = po_path.with_suffix(".tmp.po")
    with open(tmp_path, "wb") as tmp:
        write_po(tmp, po_with_tmp_id, omit_header=True)

    # The temporary PO file with the translated strings, by being a PO file, contains
    # the keywords "msgid", "msgstr" and possibly "msgid_plural": aspell will in most
    # cases not recognize them and try to correct them. It's nothing serious, but it
    # would be nice anyway if aspell could automatically ignore them.
    # We can achieve this by putting them into an additional "personal" dictionary that
    # we feed to aspell. We use a temporary file so that we don't leave any trace
    # on the system.
    ignore_list_file = NamedTemporaryFile(delete_on_close=False)
    ignore_list = "personal_ws-1.1 it 3\nmsgid\nmsgstr\nplural\n"
    with open(ignore_list_file.name, "w") as tmp_ignore:
        tmp_ignore.write(ignore_list)

    call(
        [
            "aspell",
            "-l",
            args.lang,
            #"--home-dir=.",
            f"--personal={ignore_list_file.name}",
            "check",
            tmp.name,
        ]
    )

    # Read the checked file back into Python.
    with open(tmp_path, "rb") as tmp:
        po_with_tmp_id = read_po(tmp)

    changed = False
    for m in po_with_tmp_id:
        if not m.id:
            continue
        # Remember that m.id is an integer (or a tuple of integers, all of them the same)
        # which we use to recall the English string from msgs_by_tmp_id
        eng_msg = msgs_by_tmp_id[m.id[0] if isinstance(m.id, tuple) else m.id]
        m_id = eng_msg[0]
        m_context = eng_msg[1]
        if po.get(m_id, m_context).string != m.string:
            changed = True
            po.get(m_id, m_context).string = m.string

    if args.backup and not changed:
        backup_path.unlink()  # We can remove the backup file if nothing's changed

    with open(path, "wb") as f:
        write_po(f, po)
    tmp_path.unlink()  # Delete temporary file


parser = ArgumentParser()
parser.add_argument(
    "-l", "--lang", type=str, required=True, help="the target language of the PO file"
)
parser.add_argument(
    "paths", metavar="file", nargs="+", help="PO file to check for spelling errors"
)
parser.add_argument(
    "-b",
    "--backup",
    default=False,
    action="store_true",
    help="if changes are made, create a .bak copy of the original",
)


if __name__ == "__main__":
    args = parser.parse_args()
    for path in args.paths:
        if path.endswith(".po"):
            spellcheck_po(path, args)
        else:
            backup_flag = "-b" if args.backup else "-x"
            # aspell -b: create backup
            # aspell -x: don't create backup
            call(["aspell", "-l", args.lang, backup_flag, "check", path])
