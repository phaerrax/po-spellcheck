#!/usr/bin/env python

from argparse import ArgumentParser
from os import remove
from shutil import copy2
from subprocess import call
from babel.messages.catalog import Catalog
from babel.messages.pofile import read_po, write_po


def spellcheck_po(path, args):
    with open(path, "r+b") as f:
        # The `+` is to check that the file is writable
        po = read_po(f)

    backup_path = path + ".bak"
    if args.backup:
        # `copy2` copies attempting to preserve file metadata.
        copy2(path, backup_path)

    msgs_by_tmp_id = {}
    po_with_tmp_id = Catalog()
    for i, m in enumerate(po):
        if not m.id:
            continue
        tmp_id = str(i)
        msgs_by_tmp_id[tmp_id] = m.id
        if isinstance(m.string, tuple):
            tmp_id = (tmp_id, tmp_id)
        po_with_tmp_id.add(tmp_id, m.string, lineno=m.lineno)

    tmp_path = path[:-3] + ".tmp.po"
    with open(tmp_path, "wb") as tmp:
        write_po(tmp, po_with_tmp_id, omit_header=True)

    call(["aspell", "-l", args.lang, "-x", "check", tmp.name])

    with open(tmp_path, "rb") as tmp:
        po_with_tmp_id = read_po(tmp)
    changed = False
    for m in po_with_tmp_id:
        if not m.id:
            continue
        m_id = msgs_by_tmp_id[m.id[0] if isinstance(m.id, tuple) else m.id]
        if po[m_id].string != m.string:
            changed = True
            po[m_id].string = m.string
    if args.backup and not changed:
        remove(backup_path)
    with open(path, "wb") as f:
        write_po(f, po)
    remove(tmp_path)


parser = ArgumentParser()
parser.add_argument(
    "-l", "--lang", type=str, required=True, help="the target language of the PO file"
)
parser.add_argument(
    "paths", metavar="file", nargs="+", help="PO file to check for spelling errors"
)
parser.add_argument(
    "-b",
    "--backup",
    default=False,
    action="store_true",
    help="if changes are made, create a .bak copy of the original",
)


if __name__ == "__main__":
    args = parser.parse_args()
    for path in args.paths:
        if path.endswith(".po"):
            spellcheck_po(path, args)
        else:
            backup_flag = "-b" if args.backup else "-x"
            # aspell -b: create backup
            # aspell -x: don't create backup
            call(["aspell", "-l", args.lang, backup_flag, "check", path])
